import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, ButtonContainer, ButtonGroup, FAIcon, MappedKeyBlock, } from './styled.js';
import { useEffect, useState } from 'react';
import { GamepadIcon } from './icons.js';
import { MappedKeyDisplay } from './keys.js';
import { faFingerprint } from '@fortawesome/free-solid-svg-icons';
export const BinaryButton = ({ xrController, buttonId, pointerLocked, mappedKey, }) => {
    const [isTouched, setIsTouched] = useState(false);
    const [isOnHold, setIsOnHold] = useState(false);
    const [isPressed, setIsPressed] = useState(false);
    const [isKeyPressed, setIsKeyPressed] = useState(false);
    const handedness = xrController.inputSource.handedness;
    useEffect(() => {
        const handleKeyDown = (event) => {
            if (event.code === mappedKey) {
                xrController.updateButtonValue(buttonId, 1);
                setIsKeyPressed(true);
            }
        };
        const handleKeyUp = (event) => {
            if (event.code === mappedKey) {
                xrController.updateButtonValue(buttonId, 0);
                setIsKeyPressed(false);
            }
        };
        if (pointerLocked) {
            window.addEventListener('keydown', handleKeyDown);
            window.addEventListener('keyup', handleKeyUp);
        }
        else {
            window.removeEventListener('keydown', handleKeyDown);
            window.removeEventListener('keyup', handleKeyUp);
        }
        return () => {
            window.removeEventListener('keydown', handleKeyDown);
            window.removeEventListener('keyup', handleKeyUp);
        };
    }, [mappedKey, pointerLocked, buttonId, xrController]);
    return (_jsxs(ButtonContainer, { "$reverse": handedness === 'right', children: [_jsx(GamepadIcon, { buttonName: buttonId, handedness: handedness }), _jsx(ButtonGroup, { "$reverse": handedness === 'right', children: pointerLocked ? (_jsx(MappedKeyBlock, { "$pressed": isKeyPressed, children: MappedKeyDisplay[mappedKey] })) : (_jsxs(_Fragment, { children: [_jsx(Button, { "$reverse": handedness === 'right', style: {
                                backgroundColor: isPressed
                                    ? 'rgba(255, 255, 255, 0.6)'
                                    : 'rgba(255, 255, 255, 0.3)',
                                width: '50px',
                            }, onClick: () => {
                                setIsPressed(true);
                                xrController.updateButtonValue(buttonId, 1);
                                setTimeout(() => {
                                    setIsPressed(false);
                                    xrController.updateButtonValue(buttonId, 0);
                                }, 500);
                            }, children: "Press" }), _jsx(Button, { "$reverse": handedness === 'right', style: {
                                backgroundColor: isTouched
                                    ? 'rgba(255, 255, 255, 0.6)'
                                    : 'rgba(255, 255, 255, 0.3)',
                                width: '29px',
                            }, onClick: () => {
                                setIsTouched(!isTouched);
                                xrController.updateButtonTouch(buttonId, !isTouched);
                            }, children: _jsx(FAIcon, { icon: faFingerprint }) }), _jsx(Button, { "$reverse": handedness === 'right', style: {
                                backgroundColor: isOnHold
                                    ? 'rgba(255, 255, 255, 0.6)'
                                    : 'rgba(255, 255, 255, 0.3)',
                                width: '49px',
                            }, onClick: () => {
                                setIsOnHold(!isOnHold);
                                xrController.updateButtonValue(buttonId, isOnHold ? 0 : 1);
                            }, children: "Hold" })] })) })] }));
};
//# sourceMappingURL=binary.js.map