import { jsx as _jsx } from "react/jsx-runtime";
import { AnalogButton } from './analog.js';
import { BinaryButton } from './binary.js';
import { Joystick } from './joystick.js';
import styled from 'styled-components';
const ControlsContainer = styled.div `
	padding: ${({ $reverse }) => $reverse ? '6px 2px 3px 5px' : '6px 5px 3px 2px'};
	pointer-events: all;
	background-color: rgba(43, 43, 43, 0.5);
	backdrop-filter: blur(10px);
	-webkit-backdrop-filter: blur(10px);
	border-radius: ${({ $reverse }) => ($reverse ? '12px 0 0 0' : '0 12px 0 0')};
`;
function transformGamepadConfig(gamepadConfig) {
    const axesSet = new Set();
    // Add all axis ids to the set
    for (const axis of gamepadConfig.axes) {
        if (axis && axis.id) {
            axesSet.add(axis.id);
        }
    }
    // Transform buttons to the desired format
    const transformed = gamepadConfig.buttons
        .filter((button) => button !== null) // Filter out null values
        .map((button) => ({
        id: button.id,
        type: button.type,
        hasAxes: axesSet.has(button.id),
    }));
    // Sort the array by hasAxes
    transformed.sort((a, b) => {
        if (a.hasAxes && !b.hasAxes)
            return -1;
        if (!a.hasAxes && b.hasAxes)
            return 1;
        return 0;
    });
    return transformed;
}
export const ControlsUI = ({ xrDevice, keyMap, pointerLocked, }) => {
    return (_jsx("div", { style: {
            display: 'flex',
            justifyContent: 'space-between',
            flexDirection: 'row',
        }, children: Object.entries(xrDevice.controllers).map(([handedness, controller]) => (_jsx(ControlsContainer, { "$reverse": handedness !== 'left', children: transformGamepadConfig(controller.gamepadConfig).map((buttonConfig) => {
                const mapping = keyMap[handedness];
                if (buttonConfig.hasAxes) {
                    return (_jsx(Joystick, { xrController: controller, pointerLocked: pointerLocked, buttonId: buttonConfig.id, mappedKeyUp: keyMap[handedness][`${buttonConfig.id}-up`], mappedKeyDown: mapping[`${buttonConfig.id}-down`], mappedKeyLeft: mapping[`${buttonConfig.id}-left`], mappedKeyRight: mapping[`${buttonConfig.id}-right`], mappedKeyPressed: mapping[buttonConfig.id] }, buttonConfig.id));
                }
                else if (buttonConfig.type === 'analog') {
                    return (_jsx(AnalogButton, { xrController: controller, buttonId: buttonConfig.id, mappedKey: mapping[buttonConfig.id], pointerLocked: pointerLocked }, buttonConfig.id));
                }
                else {
                    return (_jsx(BinaryButton, { xrController: controller, buttonId: buttonConfig.id, mappedKey: mapping[buttonConfig.id], pointerLocked: pointerLocked }, buttonConfig.id));
                }
            }) }, handedness))) }));
};
//# sourceMappingURL=controls.js.map