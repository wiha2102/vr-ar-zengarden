const t={RC_BOTTOM:"RC_BOTTOM",RC_RIGHT:"RC_RIGHT",RC_LEFT:"RC_LEFT",RC_TOP:"RC_TOP",BUMPER_LEFT:"BUMPER_LEFT",BUMPER_RIGHT:"BUMPER_RIGHT",TRIGGER_LEFT:"TRIGGER_LEFT",TRIGGER_RIGHT:"TRIGGER_RIGHT",CC_LEFT:"CC_LEFT",CC_RIGHT:"CC_RIGHT",THUMBSTICK_LEFT:"THUMBSTICK_LEFT",THUMBSTICK_RIGHT:"THUMBSTICK_RIGHT",LC_BOTTOM:"LC_BOTTOM",LC_RIGHT:"LC_RIGHT",LC_LEFT:"LC_LEFT",LC_TOP:"LC_TOP",CC_CENTER:"CC_CENTER"},T={RC_BOTTOM:0,RC_RIGHT:1,RC_LEFT:2,RC_TOP:3,BUMPER_LEFT:4,BUMPER_RIGHT:5,TRIGGER_LEFT:6,TRIGGER_RIGHT:7,CC_LEFT:8,CC_RIGHT:9,THUMBSTICK_LEFT:10,THUMBSTICK_RIGHT:11,LC_BOTTOM:12,LC_RIGHT:13,LC_LEFT:14,LC_TOP:15,CC_CENTER:16},e={THUMBSTICK_LEFT_X:"THUMBSTICK_LEFT_X",THUMBSTICK_LEFT_Y:"THUMBSTICK_LEFT_Y",THUMBSTICK_RIGHT_X:"THUMBSTICK_RIGHT_X",THUMBSTICK_RIGHT_Y:"THUMBSTICK_RIGHT_Y"},s={THUMBSTICK_LEFT_X:0,THUMBSTICK_LEFT_Y:1,THUMBSTICK_RIGHT_X:2,THUMBSTICK_RIGHT_Y:3},_={TRIGGER:"TRIGGER",SQUEEZE:"SQUEEZE",TOUCHPAD:"TOUCHPAD",THUMBSTICK:"THUMBSTICK",BUTTON_1:"BUTTON_1",BUTTON_2:"BUTTON_2"},n={TRIGGER:0,SQUEEZE:1,TOUCHPAD:2,THUMBSTICK:3,BUTTON_1:4,BUTTON_2:5},u={TOUCHPAD_X:"TOUCHPAD_X",TOUCHPAD_Y:"TOUCHPAD_Y",THUMBSTICK_X:"THUMBSTICK_X",THUMBSTICK_Y:"THUMBSTICK_Y"},a={TOUCHPAD_X:0,TOUCHPAD_Y:1,THUMBSTICK_X:2,THUMBSTICK_Y:3};class r{constructor(t,T={}){var e,s,_;this._buttons=[],this._gamepad=t,this._buttonPressValueMin=null!==(e=T.buttonPressValueMin)&&void 0!==e?e:0,this._buttonPressValueMax=null!==(s=T.buttonPressValueMax)&&void 0!==s?s:1,this._buttonClickThreshold=null!==(_=T.buttonClickThreshold)&&void 0!==_?_:.9;for(let t=0;t<this._gamepad.buttons.length;t++)this._buttons[t]={currFrame:{value:0,touched:!1},prevFrame:{value:0,touched:!1},pressedSince:0}}update(){for(let t=0;t<this._gamepad.buttons.length;t++)this._buttons[t].prevFrame=this._buttons[t].currFrame,this._buttons[t].currFrame={value:this._gamepad.buttons[t].value,touched:this._gamepad.buttons[t].touched}}get gamepad(){return this._gamepad}getButtonIdx(t){const e="standard"==this._gamepad.mapping?T[t]:"xr-standard"==this._gamepad.mapping?n[t]:null;if(null==e)throw`Button "${t}" does not exist in layout "${this._gamepad.mapping}"`;return e}getAxisIdx(t){const T="standard"==this._gamepad.mapping?s[t]:"xr-standard"==this._gamepad.mapping?a[t]:null;if(null==T)throw`Axis "${t}" does not exist in layout "${this._gamepad.mapping}"`;return T}getButtonValueByIndex(t){return this._buttons[t]?this._buttons[t].currFrame.value:0}getButtonValue(t){const T=this.getButtonIdx(t);return this.getButtonValueByIndex(T)}getButtonByIndex(t){return!!this._buttons[t]&&this._buttons[t].currFrame.value>this._buttonPressValueMin}getButton(t){const T=this.getButtonIdx(t);return this.getButtonByIndex(T)}getButtonDownByIndex(t){return!!this._buttons[t]&&(this._buttons[t].prevFrame.value<=this._buttonPressValueMin&&this._buttons[t].currFrame.value>this._buttonPressValueMin)}getButtonDown(t){const T=this.getButtonIdx(t);return this.getButtonDownByIndex(T)}getButtonUpByIndex(t){return!!this._buttons[t]&&(this._buttons[t].prevFrame.value>=this._buttonPressValueMax&&this._buttons[t].currFrame.value<this._buttonPressValueMax)}getButtonUp(t){const T=this.getButtonIdx(t);return this.getButtonUpByIndex(T)}getButtonClickByIndex(t){return!!this._buttons[t]&&(this._buttons[t].prevFrame.value<=this._buttonClickThreshold&&this._buttons[t].currFrame.value>this._buttonClickThreshold)}getButtonClick(t){const T=this.getButtonIdx(t);return this.getButtonClickByIndex(T)}getAxisByIndex(t){return this._gamepad.axes[t]}getAxis(t){const T=this.getAxisIdx(t);return this.getAxisByIndex(T)}get2DInputAngle(t){const T=this.getAxis(t+"_X"),e=this.getAxis(t+"_Y");if(null==T||null==e||0==T&&0==e)return NaN;let s=Math.atan(T/e);return T>=0?e<0?s*=-1:e>0?s=Math.PI-s:0==e&&(s=Math.PI/2):e<0?s*=-1:e>0?s=-Math.PI-s:0==e&&(s=-Math.PI/2),s}get2DInputValue(t){const T=this.getAxis(t+"_X"),e=this.getAxis(t+"_Y");return Math.sqrt(T*T+e*e)}getHapticActuator(t){const T=this._gamepad.hapticActuators[t];if(T)return T;throw"Requested haptic actuator does not exist in gamepad"}}const i={STANDARD:t,XR_STANDARD:_},o={STANDARD:e,XR_STANDARD:u};export{o as AXES,i as BUTTONS,r as GamepadWrapper,e as STANDARD_AXES,t as STANDARD_BUTTONS,u as XR_AXES,_ as XR_BUTTONS};
