/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
export var XRHandedness;
(function (XRHandedness) {
    XRHandedness["None"] = "none";
    XRHandedness["Left"] = "left";
    XRHandedness["Right"] = "right";
})(XRHandedness || (XRHandedness = {}));
export var XRTargetRayMode;
(function (XRTargetRayMode) {
    XRTargetRayMode["Gaze"] = "gaze";
    XRTargetRayMode["TrackedPointer"] = "tracked-pointer";
    XRTargetRayMode["Screen"] = "screen";
    XRTargetRayMode["TransientPointer"] = "transient-pointer";
})(XRTargetRayMode || (XRTargetRayMode = {}));
export class XRInputSourceArray extends Array {
}
export const PRIVATE = Symbol('@immersive-web-emulation-runtime/xr-input-source');
export class XRInputSource {
    constructor(handedness, targetRayMode, profiles, targetRaySpace, gamepad, gripSpace, hand) {
        this[PRIVATE] = {
            handedness,
            targetRayMode,
            targetRaySpace,
            gripSpace,
            profiles,
            gamepad,
            hand,
        };
    }
    get handedness() {
        return this[PRIVATE].handedness;
    }
    get targetRayMode() {
        return this[PRIVATE].targetRayMode;
    }
    get targetRaySpace() {
        return this[PRIVATE].targetRaySpace;
    }
    get gripSpace() {
        return this[PRIVATE].gripSpace;
    }
    get profiles() {
        return this[PRIVATE].profiles;
    }
    get gamepad() {
        return this[PRIVATE].gamepad;
    }
    get hand() {
        return this[PRIVATE].hand;
    }
}
//# sourceMappingURL=XRInputSource.js.map