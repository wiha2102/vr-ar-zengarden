/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var _a;
import { XRSpace } from './XRSpace.js';
export const PRIVATE = Symbol('@immersive-web-emulation-runtime/xr-reference-space');
export var XRReferenceSpaceType;
(function (XRReferenceSpaceType) {
    XRReferenceSpaceType["Viewer"] = "viewer";
    XRReferenceSpaceType["Local"] = "local";
    XRReferenceSpaceType["LocalFloor"] = "local-floor";
    XRReferenceSpaceType["BoundedFloor"] = "bounded-floor";
    XRReferenceSpaceType["Unbounded"] = "unbounded";
})(XRReferenceSpaceType || (XRReferenceSpaceType = {}));
export class XRReferenceSpace extends XRSpace {
    constructor(type, parentSpace, offsetMatrix) {
        super(parentSpace, offsetMatrix);
        this[_a] = {
            type: null,
            onreset: () => { },
        };
        this[PRIVATE].type = type;
    }
    get onreset() {
        var _b;
        return (_b = this[PRIVATE].onreset) !== null && _b !== void 0 ? _b : (() => { });
    }
    set onreset(callback) {
        if (this[PRIVATE].onreset) {
            this.removeEventListener('reset', this[PRIVATE].onreset);
        }
        this[PRIVATE].onreset = callback;
        if (callback) {
            this.addEventListener('reset', callback);
        }
    }
    // Create a new XRReferenceSpace with an offset from the current space
    getOffsetReferenceSpace(originOffset) {
        // Create a new XRReferenceSpace with the originOffset as its offsetMatrix
        // The new space's parent is set to 'this' (the current XRReferenceSpace)
        return new XRReferenceSpace(this[PRIVATE].type, this, originOffset);
    }
}
_a = PRIVATE;
//# sourceMappingURL=XRReferenceSpace.js.map