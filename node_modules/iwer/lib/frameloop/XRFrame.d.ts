/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { XRJointSpace } from '../spaces/XRJointSpace.js';
import { XRSession } from '../session/XRSession.js';
import { XRSpace } from '../spaces/XRSpace.js';
import { mat4 } from 'gl-matrix';
import { XRJointPose } from '../pose/XRJointPose.js';
import { XRPose } from '../pose/XRPose.js';
import { XRReferenceSpace } from '../spaces/XRReferenceSpace.js';
import { XRViewerPose } from '../pose/XRViewerPose.js';
export declare const PRIVATE: unique symbol;
export declare class XRFrame {
    [PRIVATE]: {
        session: XRSession;
        id: number;
        active: boolean;
        animationFrame: boolean;
        predictedDisplayTime: number;
        tempMat4: mat4;
    };
    constructor(session: XRSession, id: number, active: boolean, animationFrame: boolean, predictedDisplayTime: number);
    get session(): XRSession;
    get predictedDisplayTime(): number;
    getPose(space: XRSpace, baseSpace: XRSpace): XRPose;
    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose;
    getJointPose(joint: XRJointSpace, baseSpace: XRSpace): XRJointPose;
    fillJointRadii(jointSpaces: XRJointSpace[], radii: Float32Array): boolean;
    fillPoses(spaces: XRSpace[], baseSpace: XRSpace, transforms: Float32Array): boolean;
}
//# sourceMappingURL=XRFrame.d.ts.map