/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { GamepadConfig } from '../gamepad/Gamepad.js';
import { GlobalSpace } from '../spaces/XRSpace.js';
import { XRHandedness } from '../input/XRInputSource.js';
import { XRTrackedInput } from './XRTrackedInput.js';
import { mat4 } from 'gl-matrix';
export declare const PRIVATE: unique symbol;
export interface XRControllerConfig {
    profileId: string;
    fallbackProfileIds: string[];
    layout: {
        [handedness in XRHandedness]?: {
            gamepad: GamepadConfig;
            gripOffsetMatrix?: mat4;
            numHapticActuators: number;
        };
    };
}
export declare class XRController extends XRTrackedInput {
    [PRIVATE]: {
        gamepadConfig: GamepadConfig;
    };
    constructor(controllerConfig: XRControllerConfig, handedness: XRHandedness, globalSpace: GlobalSpace);
    get gamepadConfig(): GamepadConfig;
    updateButtonValue(id: string, value: number): void;
    updateButtonTouch(id: string, touched: boolean): void;
    updateAxis(id: string, type: 'x-axis' | 'y-axis', value: number): void;
    updateAxes(id: string, x: number, y: number): void;
}
//# sourceMappingURL=XRController.d.ts.map